---
interface Phrase {
  text: string;
  translation: string;
  audioUrl?: string;
}

interface Props {
  phrases: Phrase[];
  title?: string;
}

const { phrases, title = "Frases útiles" } = Astro.props;

// Generar IDs únicos para cada frase
const phrasesWithIds = phrases.map(phrase => ({
  ...phrase,
  id: `phrase-${crypto.randomUUID()}`
}));
---

<section class="bg-purple-50 rounded-lg p-6 mb-8 shadow-md">
  <h2 class="text-2xl font-semibold mb-6 text-purple-700">{title}</h2>
  
  <div class="space-y-6">
    {phrasesWithIds.map((phrase) => (
      <div class="phrase-item bg-white border border-purple-200 rounded-lg p-4 shadow-sm relative">
        <button 
          class="play-button bg-sky-500 hover:bg-sky-600 text-white rounded-full w-10 h-10 flex items-center justify-center flex-shrink-0 focus:outline-none absolute top-3 right-3"
          data-audio-url={phrase.audioUrl}
          aria-label="Reproducir audio">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </button>
        <div class="pr-12">
          <p class="text-lg font-medium text-purple-700">{phrase.text}</p>
          <p class="text-gray-500 text-sm mt-1">{phrase.translation}</p>
        </div>
        
        <!-- Audio embebido para pruebas -->
        <audio id={phrase.id} class="hidden" preload="auto">
          <source src={phrase.audioUrl || "/audios/audio-test.mp3"} type="audio/mpeg" />
          Tu navegador no soporta el elemento de audio.
        </audio>
      </div>
    ))}
  </div>
  
  <!-- Feedback visual al reproducir -->
  <div class="mt-6 hidden feedback-container bg-purple-100 p-4 rounded-lg text-center shadow-sm">
    <p class="text-xl text-purple-700">¡Excelente! Sigue practicando 👏</p>
  </div>
</section>

<script>
  // Gestionar la reproducción de audio
  document.addEventListener('DOMContentLoaded', () => {
    const audioButtons = document.querySelectorAll('.play-button');
    const feedbackContainer = document.querySelector('.feedback-container');
    
    // Variables para el seguimiento del progreso
    let phrasesCompleted = 0;
    const totalPhrases = audioButtons.length;
    
    audioButtons.forEach(button => {
      button.addEventListener('click', () => {
        const audioUrl = button.getAttribute('data-audio-url');
        if (!audioUrl) return;
        
        // Pausar cualquier otro audio que se esté reproduciendo
        document.querySelectorAll('audio').forEach(audio => {
          if (audio.src !== audioUrl && !audio.paused) {
            audio.pause();
            audio.currentTime = 0;
          }
        });
        
        // Reproducir el audio
        try {
          const audioElement = new Audio(audioUrl);
          audioElement.play()
            .then(() => {
              // Reproducción exitosa
              button.classList.add('bg-sky-700');
              
              // Restaurar botón después de la reproducción
              audioElement.onended = () => {
                button.classList.remove('bg-sky-700');
                
                // Incrementar contador y mostrar feedback
                const phraseItem = button.closest('.phrase-item');
                if (phraseItem && !phraseItem.classList.contains('completed')) {
                  phraseItem.classList.add('completed');
                  phrasesCompleted++;
                  
                  // Actualizar el feedback
                  updateFeedback();
                }
              };
            })
            .catch(error => {
              console.error('Error de reproducción:', error);
              alert('Error al reproducir el audio. Comprueba que el archivo exista y sea accesible.');
            });
        } catch (error) {
          console.error('Error al intentar reproducir:', error);
        }
      });
    });
    
    // Función para actualizar el feedback de progreso
    function updateFeedback() {
      if (feedbackContainer) {
        const progress = Math.round((phrasesCompleted / totalPhrases) * 100);
        
        feedbackContainer.innerHTML = `
          <div class="progress-bar w-full h-2 bg-purple-200 rounded-full overflow-hidden">
            <div class="h-full bg-sky-500 transition-all duration-500" style="width: ${progress}%"></div>
          </div>
          <p class="text-center mt-2 text-sm font-medium">
            Has practicado ${phrasesCompleted} de ${totalPhrases} frases (${progress}%)
          </p>
          ${progress === 100 ? '<p class="text-center mt-2 text-green-600 font-bold">¡Felicidades! Has completado todas las frases.</p>' : ''}
        `;
      }
    }
  });
</script> 